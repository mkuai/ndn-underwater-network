/* This file was generated by PyBindGen 0.17.0.887 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "ns3/ndnSIM-module.h"
#include <ostream>
#include <sstream>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeValue_wrapper_registry;
#define PyNs3AttributeValue_wrapper_registry (*_PyNs3AttributeValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)


typedef struct {
    PyObject_HEAD
    ns3::ApplicationContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ApplicationContainer;


extern PyTypeObject *_PyNs3ApplicationContainer_Type;
#define PyNs3ApplicationContainer_Type (*_PyNs3ApplicationContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3ApplicationContainer_wrapper_registry;
#define PyNs3ApplicationContainer_wrapper_registry (*_PyNs3ApplicationContainer_wrapper_registry)
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::StackHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnStackHelper;


extern PyTypeObject PyNs3NdnStackHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnStackHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::FibHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFibHelper;


extern PyTypeObject PyNs3NdnFibHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnFibHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::StrategyChoiceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnStrategyChoiceHelper;


extern PyTypeObject PyNs3NdnStrategyChoiceHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnStrategyChoiceHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::AppHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnAppHelper;


extern PyTypeObject PyNs3NdnAppHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnAppHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::GlobalRoutingHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnGlobalRoutingHelper;


extern PyTypeObject PyNs3NdnGlobalRoutingHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnGlobalRoutingHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnL3Protocol;


extern PyTypeObject PyNs3NdnL3Protocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::Name *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnName;


extern PyTypeObject PyNs3NdnName_Type;


typedef struct {
    PyObject_HEAD
    PyNs3NdnName *container;
    ns3::ndn::Name::const_iterator *iterator;
} PyNs3NdnName_Iter;


extern PyTypeObject PyNs3NdnName_IterType;

extern std::map<void*, PyObject*> PyNs3NdnName_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::Interest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnInterest;


extern PyTypeObject PyNs3NdnInterest_Type;

extern std::map<void*, PyObject*> PyNs3NdnInterest_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::Data *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnData;


extern PyTypeObject PyNs3NdnData_Type;

extern std::map<void*, PyObject*> PyNs3NdnData_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ::std::shared_ptr< ns3::ndn::Face > obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFace;


extern PyTypeObject PyNs3NdnFace_Type;

extern std::map<void*, PyObject*> PyNs3NdnFace_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ptr< ns3::ndn::FaceContainer > obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFaceContainer;


extern PyTypeObject PyNs3NdnFaceContainer_Type;

extern std::map<void*, PyObject*> PyNs3NdnFaceContainer_wrapper_registry;
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::name::Component *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNameComponent;


extern PyTypeObject PyNs3NdnNameComponent_Type;

extern std::map<void*, PyObject*> PyNs3NdnNameComponent_wrapper_registry;
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ::std::shared_ptr< ns3::ndn::nfd::Forwarder > obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdForwarder;


extern PyTypeObject PyNs3NdnNfdForwarder_Type;

extern std::map<void*, PyObject*> PyNs3NdnNfdForwarder_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::nfd::Fib *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdFib;


extern PyTypeObject PyNs3NdnNfdFib_Type;


typedef struct {
    PyObject_HEAD
    PyNs3NdnNfdFib *container;
    ns3::ndn::nfd::Fib::const_iterator *iterator;
} PyNs3NdnNfdFib_Iter;


extern PyTypeObject PyNs3NdnNfdFib_IterType;

extern std::map<void*, PyObject*> PyNs3NdnNfdFib_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::nfd::Pit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdPit;


extern PyTypeObject PyNs3NdnNfdPit_Type;


typedef struct {
    PyObject_HEAD
    PyNs3NdnNfdPit *container;
    ns3::ndn::nfd::Pit::const_iterator *iterator;
} PyNs3NdnNfdPit_Iter;


extern PyTypeObject PyNs3NdnNfdPit_IterType;

extern std::map<void*, PyObject*> PyNs3NdnNfdPit_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::nfd::Cs *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdCs;


extern PyTypeObject PyNs3NdnNfdCs_Type;


typedef struct {
    PyObject_HEAD
    PyNs3NdnNfdCs *container;
    ns3::ndn::nfd::Cs::const_iterator *iterator;
} PyNs3NdnNfdCs_Iter;


extern PyTypeObject PyNs3NdnNfdCs_IterType;

extern std::map<void*, PyObject*> PyNs3NdnNfdCs_wrapper_registry;
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::nfd::fib::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdFibEntry;


extern PyTypeObject PyNs3NdnNfdFibEntry_Type;

extern std::map<void*, PyObject*> PyNs3NdnNfdFibEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::nfd::fib::NextHop *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdFibNextHop;


extern PyTypeObject PyNs3NdnNfdFibNextHop_Type;

extern std::map<void*, PyObject*> PyNs3NdnNfdFibNextHop_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::nfd::fib::NextHopList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdFibNextHopList;


extern PyTypeObject PyNs3NdnNfdFibNextHopList_Type;


typedef struct {
    PyObject_HEAD
    PyNs3NdnNfdFibNextHopList *container;
    ns3::ndn::nfd::fib::NextHopList::const_iterator *iterator;
} PyNs3NdnNfdFibNextHopList_Iter;


extern PyTypeObject PyNs3NdnNfdFibNextHopList_IterType;

extern std::map<void*, PyObject*> PyNs3NdnNfdFibNextHopList_wrapper_registry;
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::nfd::pit::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdPitEntry;


extern PyTypeObject PyNs3NdnNfdPitEntry_Type;

extern std::map<void*, PyObject*> PyNs3NdnNfdPitEntry_wrapper_registry;
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::nfd::cs::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNfdCsEntry;


extern PyTypeObject PyNs3NdnNfdCsEntry_Type;

extern std::map<void*, PyObject*> PyNs3NdnNfdCsEntry_wrapper_registry;
